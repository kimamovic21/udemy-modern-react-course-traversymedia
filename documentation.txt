Modern React Course Traversy Media


Section 01: Introduction and Getting Started


01. Welcome to the course

02. How to take this course

03. Course code repos

04. What is React ?

05. React App Architecture

06. Component-Based Development

07. React vs Vanilla Javascript

08. React Ecosystem

09. How React works under the hood

10. Development environment setup



Section 02: React-related JavaScript refresher


11. Section Intro

12. Arrow functions

13. Template literals

14. Ternary & short circuit rendering

15. Destructuring & rest operator

16. Array methods

17. Optional chaining & nullish coalescing operator

18. Immutability & spread operator

19. Promises & async await

Quiz 1: Section quiz



Section 03: React fundamentals - state, hooks, events, props & more

20. Section intro

21. Quick React setup & createElement
-open link: https://react.dev
-open link: https://react.dev/learn/installation
-create folder react-test and index.html file
-run index.html with Live server VS Code extension
-open route: http://127.0.0.1:5500/react-test/index.html

22. Intro to JSX (JavaScript XML)
-open link: https://babeljs.io
-in index.html file add script element for babel

23. Vite build tool setup
-open link: https://nodejs.org/en
-open link: https://vite.dev
-type command: npx create-vite@latest rating-ui
-type command: cd rating-ui
-type command: npm i
-type command: npm run dev
-open route: http://localhost:5173

24. Creating components
-open link: https://react.dev/reference/react/Component
-create folder components and component Rating.jsx
-in component App.jsx import component Rating from component Rating.jsx

25. Styling in React
-open link: https://react.dev/reference/react-dom/components/style
-in folder public add favicon icon
-in index.html file add element link for favicon icon
-in component Rating.jsx add inline styles
-in index.css add css styles for Rating component
-in component Rating.jsx add to parent div element css class rating-container

26. Lists
-open link: https://react.dev/learn/rendering-lists
-in component Rating.jsx create variable const stars
-in jsx invoke function stars.map()

27. Handling events
-open link: https://react.dev/learn/responding-to-events
-in component Rating.jsx create function clicked()
-in jsx add to span element event onClick

28. Intro to state
-open link: https://react.dev/learn/managing-state

29. Rating state
-in component Rating.jsx import function useState from package react
-in component Rating invoke function useState()
-create two state variables and two set functions
-in jsx add to span element events onMouseEnter and onMouseLeave

30. More on useState hook

31. Conditional rendering & styling
-open link: https://react.dev/learn/conditional-rendering
-in component Rating.jsx add to span element dynamic css classes
-create variable const feedbackMessages
-in jsx add conditional rendering rating > 0 &&

32. Props
open link: https://react.dev/learn/passing-props-to-a-component
-in component App.jsx, add to component Rating props
-in component Rating.jsx, add to function Rating parameters destructed props

33. Component composition
-in folder components create component Star.jsx
-add to function Star parameters destructed props
-move span element from component Rating.jsx to component Star.jsx
-in component Rating.jsx import component Star from component Star.jsx
-in function map add component Star with props

34. Submit rating
-in index.css file add styles for Submit button and Modal
-in component Rating.jsx create button element with props className, onClick and disabled
-create state variable const submitted and set function setSubmitted
-create function handleSubmit()
-in jsx add conditional rendering
-create function closeModal()
-open route: http://localhost:5173 and click button Submit

35. Modal component composition
-in folder components create component Modal.jsx
-in function Modal add condition if (!isOpen)
-in component Rating.jsx import component Modal from component Modal.jsx
-open route: http://localhost:5173 and click button Submit

36. Passing data as children
-open link: https://react.dev/reference/react/Children
-in folder components create component Button.jsx
-add to function Button() parameters destructed props
-in component Rating.jsx import component Button from component Button.jsx
-in component Modal.jsx import component Button from component Button.jsx
-open route: http://localhost:5173 and click button Submit

Quiz 2: Section quiz



Section 04: Forms, input & controlled components - Notes app project

37. Section intro

38. App & Tailwind CSS Setup (v4)
-type command: npx create-vite@latest notes-app
-type commands: cd notes-app and npm i
-open link: https://tailwindcss.com
-open link: https://tailwindcss.com/blog/tailwindcss-v4
-type command: npm install tailwindcss @tailwindcss/vite
-in vite.config.js file import function tailwindcss from package tailwindcss/vite
-in array plugins invoke function tailwindcss()
-in index.css file add directive @import 'tailwindcss'
-in component App.jsx create HTML elements with Tailwind CSS classes
-type command: npm run dev
-open route: http://localhost:5173

39. Controlled inputs
-open link: https://react.dev/reference/react-dom/components/input
-create folder components and component NoteForm.jsx
-in component NoteForm.jsx import and invoke functions useState()
-create state variables and set functions
-in jsx create HTML elements with Tailwind CSS classes
-in component App.jsx import component NoteForm from component NoteForm.jsx
-open route: http://localhost:5173

40. Form data objects
-in component NoteForm.jsx create state variable const formData and set function setFormData
-create function handleChange()
-in prop value replace state variables with state variable formData
-in events onChange replace set functions with set function handleChange 
-open route: http://localhost:5173

41. Form submission & global state
-in component App.jsx import and invoke function useState()
-create state variable const notes and set function setNotes
-in jsx, add to component NoteForm props notes and setNotes
-in component NoteForm.jsx, add to function NoteForm() destructed props
-create function handleSubmit()
-in jsx add to form element event onSubmit and pass function handleSubmit
-create button element with Tailwind CSS classes
-open route: http://localhost:5173

42. Show notes
-in folder components create component NoteList.jsx
-in jsx create HTML elements with Tailwind CSS classes
-add to function NoteList() destructed parameter prop notes
-in parent div element invoke function notes.map()
-in component App.jsx import component NoteList from component NoteList.jsx
-in jsx add component NoteList with prop notes
-open route: http://localhost:5173

43. Make form collapsible
-in component NoteForm.jsx create state variable const isFormVisible and set function setIsFormVisible
-in jsx create button element with Tailwind CSS classes and event onClick
-in button element add ternary condition isFormVisible ?
-add conditional rendering isFormVisible &&
-in function handleSubmit() invoke function setIsFormVisible(false)
-open route: http://localhost:5173

44. Reusable input components
-in folder components create folder inputs and component TextInput.jsx
-add to function TextInput() destructed parameter props
-in component NoteForm.jsx import component TextInput from component TextInput.jsx
-in jsx add component TextInput with props
-create component SelectInput.jsx
-in component NoteForm.jsx import component SelectInput from component SelectInput.jsx
-repeat the same procedure with components SelectInput.jsx and NoteForm.jsx
-create component TextareaInput.jsx
-in component NoteForm.jsx import component TextareaInput from component TextareaInput.jsx
-repeat the same procedure with components TextareaInput.jsx and NoteForm.jsx
-open route: http://localhost:5173

45. Delete notes
-in component NoteList.jsx, in jsx create button Delete element with Tailwind CSS classes and event onClick
-in component App.jsx create function deleteNote()
-in jsx add to component NoteList prop deleteNote
-in component NoteList.jsx add to function NoteList() destructed parameter prop deleteNote
-open route: http://localhost:5173

46. Conditional rendering challenge
-in component NoteList.jsx, in function notes.map() add to div element dynamic classes based on note priority
-open route: http://localhost:5173

47. Prop drilling
-open link: https://react.dev/learn/passing-data-deeply-with-context
-in folder components create component Note.jsx
-in component NoteList.jsx import component Note from component Note.jsx
-in function notes.map() add component Note with props
-open route: http://localhost:5173

Quiz 3: Section quiz



Section 05: Component lifecycle & useEffect hook

48. Section intro

49. Component lifecycle explained

50. Classes & lifecycle methods

51. Lifecycle & useEffect hook
-open link: https://react.dev/reference/react/useEffect
-create new Vite React.js project lifecycle-playground
-in index.css file add CSS classes
-in component App.jsx create state variable const showLogger and set function setShowLogger
-in jsx create HTML elements with CSS classes
-in button element add ternary condition showLogger ? 
-add conditional rendering showLogger && 
-create folder components and component LifecycleLogger.jsx
-in component LifecycleLogger.jsx import functions useState and useEffect from package react
-create state variable const count and set function setCount
-invoke two functions useEffect()
-create function incrementCount()
-in component App.jsx import component LifecycleLogger from component LifecycleLogger.jsx
-open route: http://localhost:5173

52. LocalStorage side effects
-in project notes-app, in component App.jsx import function useEffect from package react
-invoke function useEffect()
-in function useState() create variable const notes
-open route: http://localhost:5173

Quiz 4: Section quiz



Section 06: useRef hook - Simple timer project

53. Section intro

54. What is useRef & project setup
-open link: https://react.dev/reference/react/useRef
-create new Vite React.js project simple-timer
-type command: npm i tailwindcss @tailwindcss/vite
-open route: http://localhost:5173

55. Hook useRef in action & uncontrolled inputs
-in component App.jsx import function useRef from package react
-in jsx create HTML elements with Tailwind CSS classes
-create variable const inputRef
-create function submit()
-in jsx add to input element prop ref
-add to button element onClick event
-open route: http://localhost:5173

56. Persist timer across re-renders
-in component App.jsx create variable const timerRef
-in jsx create HTML elements with Tailwind CSS classes
-create two state variables and two set functions
-create functions toggleTimer() and resetTimer()
-open route: http://localhost:5173

57. Component composition challenge
-create folder components and component Timer.jsx
-in component App.jsx import component Timer from component Timer.jsx
-create component TimerDisplay.jsx
-in component Timer.jsx import component TimerDisplay from component TimerDisplay.jsx
-create component TimerControls.jsx
-in component Timer.jsx import component TimerControls from component TimerControls.jsx
-open route: http://localhost:5173

58. Auto-focus start button
-in component TimerControls.jsx import functions useRef and useEffect from package react
-create variable const startButtonRef
-invoke function useEffect
-in jsx add to button element prop ref
-open route: http://localhost:5173

59. Save timer to local storage
-in component Timer.jsx import function useEffect from package react
-in function useState for time pass anonymous function
-invoke function useEffect()
-in function resetTimer() invoke function localStorage.removeItem('time')
-open route: http://localhost:5173

Quiz 5: Section quiz



Section 07: Working with APIs - Crypto dash project

60. Section & project intro

61. API info & project setup
-open link: https://www.coingecko.com
-open link: https://docs.coingecko.com/reference/coins-markets
-create new Vite React.js project crypto-dash
-in index.css file add CSS classes
-in folder public add favicon icon
-open route: http://localhost:5173

62. Making HTTP requests
-open link: https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=false
-import functions useState and useEffect from package react
-in component App.jsx create three state variables and three set functions
-create variable API_URL
-invoke function useEffect()
-open route: http://localhost:5173

63. Async/await in useEffect
-in function useEffect() create async function fetchCoins()
-in function fetchCoins() add try/catch/finally blocks
-open route: http://localhost:5173

64. Display coin data
-in component App.jsx, in jsx add conditional rendering for loading and error
-add conditional rendering !loading && !error &&
-in conditional rendering add main element
-in main element invoke function coins.map()
-create folder components and component CoinCard.jsx
-in component App.jsx import component CoinCard from CoinCard.jsx
-in function coins.map() add component CoinCard with props key and coin
-open route: http://localhost:5173

65. Environment variables
-open link: https://vite.dev/guide/env-and-mode
-create files .env.local and example.env 
-in .env.local file create variable VITE_COINS_API_URL
-in component App.jsx create variable const API_URL
-open route: http://localhost:5173

66. Limit selector
-in component App.jsx create state variable const limit and set function setLimit
-in folder components create component LimitSelector.jsx
-in component App.jsx import component LimitSelector from LimitSelector.jsx
-open route: http://localhost:5173

67. Filter coins
-in component App.jsx create state variable const filter and set function setFilter
-in folder components create component FilterInput.jsx
-in component App.jsx import component FilterInput from FilterInput.jsx
-in jsx create div element with class top-controls
-in div element add components FilterInput and LimitSelector
-create variable const filteredCoins
-in conditional rendering invoke function filteredCoins.map()
-add ternary condition for filteredCoins.length > 0 
-open route: http://localhost:5173

68. Sort order selector
-in component App.jsx create state variable const sortBy and set function setSortBy
-in folder components create component SortSelector.jsx
-in component App.jsx import component SortSelector from SortSelector.jsx
-in div element top-controls add component SortSelector
-update variable const filteredCoins with sorting logic
-open route: http://localhost:5173

Quiz 6: Section quiz



Section 08: React router in declarative mode - extend Crypto dash project

69. Intro to routing

70. React router syntax

71. Homepage route
-open link: https://reactrouter.com
-open link: https://www.npmjs.com/package/react-router
-type command: npm i react-router
-in component main.jsx import component BrowserRouter from package react-router
-in jsx wrap component App with component BrowserRouter
-in folder src create folder pages
-in folder pages create component home.jsx
-in component home.jsx create and export function HomePage() as default
-add to function HomePage() parameters destructed props
-in component App.jsx import components Routes and Route from package react-router
-import component HomePage from folder pages/home.jsx
-in jsx add component Routes as parent component
-in component Routes add component Route with props path and element
-in prop element add component HomePage with props
-open route: http://localhost:5173

72. About page & link component
-in folder pages create component about.jsx
-in component App.jsx import component AboutPage from folder pages/about.jsx
-in jsx add component Route for component AboutPage
-in folder components create component Header.jsx
-open link: https://reactrouter.com/api/components/Link
-in component Header.jsx import component Link from package react-router
-in component App.jsx import component Header from folder components/Header.jsx
-open route: http://localhost:5173
-open route: http://localhost:5173/about

73. Not found page
-open route: http://localhost:5173/test
-in folder pages create component not-found.jsx
-in component App.jsx import component NotFoundPage from folder pages/not-found.jsx
-in jsx add component Route for component NotFoundPage

74. Fetch coin details
-open link: https://reactrouter.com/api/hooks/useParams
-in folder pages create component coin-details.jsx
-in component App.jsx import component CoinDetailsPage from folder pages/coin-details.jsx
-in component coin-details.jsx import function useParams from package react-router
-in function CoinDetailsPage() destructure variable const { id } from function useParams()
-in component CoinCard.jsx import component Link from package react-router
-in jsx wrap all HTML elements with component Link
-in component coin-details.jsx import functions useState and useEffect from package react
-create three state variables and three set function
-invoke function useEffect()
-in function useEffect() create and invoke function fetchCoin()
-in .env.local file create env variable VITE_COIN_API_URL
-open route: http://localhost:5173/coin/bitcoin

75. Display coin details
-in component coin-details.jsx import component Link from package react-router
-in jsx display information about coin
-open route: http://localhost:5173/coin/bitcoin

76. Add loading spinner
-open link: https://www.npmjs.com/package/react-spinners
-type command: npm i react-spinners
-in folder components create component Spinner.jsx
-in component coin-details.jsx import component Spinner from folder components/Spinner.jsx
-in component home.jsx import component Spinner from folder components/Spinner.jsx
-open route: http://localhost:5173
-open route: http://localhost:5173/coin/bitcoin

77. Get & format chart data
-open link: https://www.chartjs.org
-open link: https://www.npmjs.com/package/chart.js
-open link: https://www.npmjs.com/package/react-chartjs-2
-open link: https://www.npmjs.com/package/chartjs-adapter-date-fns
-open link: https://www.npmjs.com/package/date-fns
-type command: npm i chart.js react-chartjs-2 chartjs-adapter-date-fns date-fns
-in folder components create component CoinChart.jsx
-open link: https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=7
-in component CoinChart.jsx import components from package chart.js
-import component Line from package react-chartjs-2
-import functions useEffect and useState from package react
-create two state variables and two set functions
-invoke function useEffect()
-in function useEffect() create and invoke function fetchChartData()
-in component coin-details.jsx import component CoinChart from folder components/CoinChart.jsx
-open route: http://localhost:5173/coin/bitcoin

78. Show chart data
-in component CoinChart.jsx, in parent div element add component Line with props data and options 
-add condition if (loading)
-open route: http://localhost:5173/coin/bitcoin

Quiz 7: Section quiz



Section 09: Build & deploy

79. Section intro

80. Understanding the build process

81. The build command
-open link: https://vite.dev/guide/build
-type command: npm run build
-type command: npm run preview
-open link: http://localhost:4173
-in vite.config.js file add object build

82. Deploy to Vercel
-open link: https://vercel.com
-click add new project button
-add env variables
-click deploy button
-open link: https://udemy-crypto-dash-traversy-media.vercel.app

Quiz 8: Section quiz



Section 10: Context API - Shopping cart UI

83. Section intro

84. What is the Context API
-open link: https://react.dev/reference/react/createContext

85. Project setup
-create new Vite React.js project
-type command: npm install tailwindcss @tailwindcss/vite
-open link: https://react-icons.github.io/react-icons
-type command: npm i react-icons
-in vite.config.js file import function tailwindcss from package tailwindcss/vite
-in index.css file add directive @import 'tailwindcss'
-in folder public add folder images
-in folder src create folder data and db.json file
-open route: http://localhost:5173

86. JSON Server setup
-open link: https://jsonplaceholder.typicode.com
-open link: https://www.npmjs.com/package/json-server
-type command: npm install -D json-server
-in package.json file add command json-server
-type command: npm run json-server
-open route: http://localhost:5000
-open route: http://localhost:5000/products
-open route: http://localhost:5173

87. Display product data
-in component App.jsx import functions useState and useEffect from package react
-create three state variables and three set functions
-invoke function useEffect()
-in function useEffect() create and invoke function fetchProducts()
-in jsx add conditional rendering for loading and error state
-create HTML elements with Tailwind CSS classes
-create folder components and component ProductList.jsx
-in component App.jsx import component ProductList from folder components/ProductList.jsx
-create component ProductCard.jsx
-in component ProductList.jsx import component ProductCard from folder components/ProductCard.jsx
-open route: http://localhost:5173
-open route: http://localhost:5000/products

88. Setup Proxy
-open link: https://vite.dev/config/server-options
-in vite.config.js file add object server
-in component App.jsx invoke function await fetch('/api/products')
-open route: http://localhost:5173
-open route: http://localhost:5000/products

89. Product Context
-create folder context and component ProductContext.jsx
-in component ProductContext.jsx add logic for React Context
-in component ProductList.jsx import function useContext from package react
-import component ProductContext from folder context/ProductContext.jsx
-in function ProductList() invoke function useContext()
-in component ProductList.jsx import function useProducts from folder context/ProductContext.jsx
-in component ProductList() invoke function useProducts()
-in component main.jsx import component ProductContext from folder context/ProductContext.jsx
-open route: http://localhost:5173
-open route: http://localhost:5000/products

90. Cart Context
-in folder context create component CartContext.jsx
-in component CartContext.jsx add logic for React Context
-in component main.jsx import component CartContext from folder context/CartContext.jsx
-open route: http://localhost:5173
-open route: http://localhost:5000/products

91. Add to cart button
-in component ProductCard.jsx, in jsx create button element with Tailwind CSS classes and event onClick
-in component CartContext.jsx create function addToCart()
-in prop value add variable cart and function addToCart
-in component ProductCard.jsx import function useCart from folder context/CartContext.jsx
-in function ProductCard() invoke function useCart()
-destructure function addToCart from function useCart()
-in event onClick pass anonymous function
-in anonymous function invoke function addToCart()
-open route: http://localhost:5173
-open route: http://localhost:5000/products

92. Header & cart count
-in folder components create component Header.jsx 
-in component Header.jsx add logic for displaying cart count
-in component App.jsx import component Header from folder components/Header.jsx
-open route: http://localhost:5173
-open route: http://localhost:5000/products

93. Cart items dropdown
-in component Header.jsx import function useState from package react
-create state variable showDropdown and set function setShowDropdown
-create variable const total
-in jsx add logic for displaying cart items dropdown
-open route: http://localhost:5173
-open route: http://localhost:5000/products

94. Remove items & clear cart
-in component CartContext.jsx create function removeFromCart()
-in prop value add function removeFromCart
-in component Header.jsx, destructure function removeFromCart from function useCart()
-in jsx create button element for deleting item from cart
-in component CartContext.jsx create function clearCart
-in prop value add function clearCart
-in component Header.jsx destructed function clearCart from function useCart()
-in jsx create button element for clearing cart
-open route: http://localhost:5173
-open route: http://localhost:5000/products

95. Store cart items to local storage
-in component CartContext.jsx import function useEffect from package react
-in function useState() invoke anonymous function
-in anonymous function create variable const stored
-invoke function useEffect()
-in function useEffect() invoke function localStorage.setItem()
-open route: http://localhost:5173
-open route: http://localhost:5000/products

Quiz 9: Section quiz



Section 11: React router framework mode - friendly dev project

96. Section & project intro

97. Project setup & file structure
-open link: https://reactrouter.com
-create new Vite React Router project
-type command: npm run dev
-open route: http://localhost:5173

98. Creating routes
-in routes.ts file import function route from package react router
-in array add function route() for each route
-in folder routes create component about.tsx
-create folders about and home
-in folders about and home create components index.tsx
-create folder contact and component index.tsx
-in routes.ts file add function route for contact component
-create folder projects and component index.tsx
-in routes.ts file add function route for projects component
-create folder blog and component index.tsx
-in routes.ts file add function route for blog component
-open route: http://localhost:5173
-open route: http://localhost:5173/about
-open route: http://localhost:5173/contact
-open route: http://localhost:5173/projects
-open route: http://localhost:5173/blog

99. Devtools console error fix
-open link: https://www.npmjs.com/package/@improvements/vite-plugin-devtools-json
-type command: npm install -D vite-plugin-devtools-json
-in vite.config.ts file import function devtoolsJson form package improvements/vite-plugin-devtools-json
-in array plugins invoke function devtoolsJson()
-type command npm run dev
-open route: http://localhost:5173

100. SSR & client hydration
-in home/index.tsx component create variable const now
-import and invoke function useEffect()
-open route: http://localhost:5173