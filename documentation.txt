Modern React Course Traversy Media


Section 01: Introduction and Getting Started


01. Welcome to the course

02. How to take this course

03. Course code repos

04. What is React ?

05. React App Architecture

06. Component-Based Development

07. React vs Vanilla Javascript

08. React Ecosystem

09. How React works under the hood

10. Development environment setup



Section 02: React-related JavaScript refresher


11. Section Intro

12. Arrow functions

13. Template literals

14. Ternary & short circuit rendering

15. Destructuring & rest operator

16. Array methods

17. Optional chaining & nullish coalescing operator

18. Immutability & spread operator

19. Promises & async await

Quiz 1: Section quiz



Section 03: React fundamentals - state, hooks, events, props & more

20. Section intro

21. Quick React setup & createElement
-open link: https://react.dev
-open link: https://react.dev/learn/installation
-create folder react-test and index.html file
-run index.html with Live server VS Code extension
-open route: http://127.0.0.1:5500/react-test/index.html

22. Intro to JSX (JavaScript XML)
-open link: https://babeljs.io
-in index.html file add script element for babel

23. Vite build tool setup
-open link: https://nodejs.org/en
-open link: https://vite.dev
-type command: npx create-vite@latest rating-ui
-type command: cd rating-ui
-type command: npm i
-type command: npm run dev
-open route: http://localhost:5173

24. Creating components
-open link: https://react.dev/reference/react/Component
-create folder components and component Rating.jsx
-in component App.jsx import component Rating from component Rating.jsx

25. Styling in React
-open link: https://react.dev/reference/react-dom/components/style
-in folder public add favicon icon
-in index.html file add element link for favicon icon
-in component Rating.jsx add inline styles
-in index.css add css styles for Rating component
-in component Rating.jsx add to parent div element css class rating-container

26. Lists
-open link: https://react.dev/learn/rendering-lists
-in component Rating.jsx create variable const stars
-in jsx invoke function stars.map()

27. Handling events
-open link: https://react.dev/learn/responding-to-events
-in component Rating.jsx create function clicked()
-in jsx add to span element event onClick

28. Intro to state
-open link: https://react.dev/learn/managing-state

29. Rating state
-in component Rating.jsx import function useState from package react
-in component Rating invoke function useState()
-create two state variables and two set functions
-in jsx add to span element events onMouseEnter and onMouseLeave

30. More on useState hook

31. Conditional rendering & styling
-open link: https://react.dev/learn/conditional-rendering
-in component Rating.jsx add to span element dynamic css classes
-create variable const feedbackMessages
-in jsx add conditional rendering rating > 0 &&

32. Props
open link: https://react.dev/learn/passing-props-to-a-component
-in component App.jsx, add to component Rating props
-in component Rating.jsx, add to function Rating parameters destructed props

33. Component composition
-in folder components create component Star.jsx
-add to function Star parameters destructed props
-move span element from component Rating.jsx to component Star.jsx
-in component Rating.jsx import component Star from component Star.jsx
-in function map add component Star with props

34. Submit rating
-in index.css file add styles for Submit button and Modal
-in component Rating.jsx create button element with props className, onClick and disabled
-create state variable const submitted and set function setSubmitted
-create function handleSubmit()
-in jsx add conditional rendering
-create function closeModal()
-open route: http://localhost:5173 and click button Submit

35. Modal component composition
-in folder components create component Modal.jsx
-in function Modal add condition if (!isOpen)
-in component Rating.jsx import component Modal from component Modal.jsx
-open route: http://localhost:5173 and click button Submit

36. Passing data as children
-open link: https://react.dev/reference/react/Children
-in folder components create component Button.jsx
-add to function Button() parameters destructed props
-in component Rating.jsx import component Button from component Button.jsx
-in component Modal.jsx import component Button from component Button.jsx
-open route: http://localhost:5173 and click button Submit

Quiz 2: Section quiz



Section 04: Forms, input & controlled components - Notes app project

37. Section intro

38. App & Tailwind CSS Setup (v4)
-type command: npx create-vite@latest notes-app
-type commands: cd notes-app and npm i
-open link: https://tailwindcss.com
-open link: https://tailwindcss.com/blog/tailwindcss-v4
-type command: npm install tailwindcss @tailwindcss/vite
-in vite.config.js file import function tailwindcss from package tailwindcss/vite
-in array plugins invoke function tailwindcss()
-in index.css file add directive @import 'tailwindcss'
-in component App.jsx create HTML elements with Tailwind CSS classes
-type command: npm run dev
-open route: http://localhost:5173

39. Controlled inputs
-open link: https://react.dev/reference/react-dom/components/input
-create folder components and component NoteForm.jsx
-in component NoteForm.jsx import and invoke functions useState()
-create state variables and set functions
-in jsx create HTML elements with Tailwind CSS classes
-in component App.jsx import component NoteForm from component NoteForm.jsx
-open route: http://localhost:5173

40. Form data objects
-in component NoteForm.jsx create state variable const formData and set function setFormData
-create function handleChange()
-in prop value replace state variables with state variable formData
-in events onChange replace set functions with set function handleChange 
-open route: http://localhost:5173

41. Form submission & global state
-in component App.jsx import and invoke function useState()
-create state variable const notes and set function setNotes
-in jsx, add to component NoteForm props notes and setNotes
-in component NoteForm.jsx, add to function NoteForm() destructed props
-create function handleSubmit()
-in jsx add to form element event onSubmit and pass function handleSubmit
-create button element with Tailwind CSS classes
-open route: http://localhost:5173

42. Show notes
-in folder components create component NoteList.jsx
-in jsx create HTML elements with Tailwind CSS classes
-add to function NoteList() destructed parameter prop notes
-in parent div element invoke function notes.map()
-in component App.jsx import component NoteList from component NoteList.jsx
-in jsx add component NoteList with prop notes
-open route: http://localhost:5173

43. Make form collapsible
-in component NoteForm.jsx create state variable const isFormVisible and set function setIsFormVisible
-in jsx create button element with Tailwind CSS classes and event onClick
-in button element add ternary condition isFormVisible ?
-add conditional rendering isFormVisible &&
-in function handleSubmit() invoke function setIsFormVisible(false)
-open route: http://localhost:5173

44. Reusable input components
-in folder components create folder inputs and component TextInput.jsx
-add to function TextInput() destructed parameter props
-in component NoteForm.jsx import component TextInput from component TextInput.jsx
-in jsx add component TextInput with props
-create component SelectInput.jsx
-in component NoteForm.jsx import component SelectInput from component SelectInput.jsx
-repeat the same procedure with components SelectInput.jsx and NoteForm.jsx
-create component TextareaInput.jsx
-in component NoteForm.jsx import component TextareaInput from component TextareaInput.jsx
-repeat the same procedure with components TextareaInput.jsx and NoteForm.jsx
-open route: http://localhost:5173

45. Delete notes
-in component NoteList.jsx, in jsx create button Delete element with Tailwind CSS classes and event onClick
-in component App.jsx create function deleteNote()
-in jsx add to component NoteList prop deleteNote
-in component NoteList.jsx add to function NoteList() destructed parameter prop deleteNote
-open route: http://localhost:5173

46. Conditional rendering challenge
-in component NoteList.jsx, in function notes.map() add to div element dynamic classes based on note priority
-open route: http://localhost:5173

47. Prop drilling
-open link: https://react.dev/learn/passing-data-deeply-with-context
-in folder components create component Note.jsx
-in component NoteList.jsx import component Note from component Note.jsx
-in function notes.map() add component Note with props
-open route: http://localhost:5173

Quiz 3: Section quiz



Section 05: Component lifecycle & useEffect hook

48. Section intro

49. Component lifecycle explained

50. Classes & lifecycle methods

51. Lifecycle & useEffect hook
-open link: https://react.dev/reference/react/useEffect
-create new Vite React.js project lifecycle-playground
-in index.css file add CSS classes
-in component App.jsx create state variable const showLogger and set function setShowLogger
-in jsx create HTML elements with CSS classes
-in button element add ternary condition showLogger ? 
-add conditional rendering showLogger && 
-create folder components and component LifecycleLogger.jsx
-in component LifecycleLogger.jsx import functions useState and useEffect from package react
-create state variable const count and set function setCount
-invoke two functions useEffect()
-create function incrementCount()
-in component App.jsx import component LifecycleLogger from component LifecycleLogger.jsx
-open route: http://localhost:5173

52. LocalStorage side effects
-in project notes-app, in component App.jsx import function useEffect from package react
-invoke function useEffect()
-in function useState() create variable const notes

Quiz 4: Section quiz



Section 06: useRef hook - Simple timer project

53. Section intro

54. What is useRef & project setup
-open link: https://react.dev/reference/react/useRef
-create new Vite React.js project simple-timer
-type command: npm i tailwindcss @tailwindcss/vite

55. Hook useRef in action & uncontrolled inputs
-in component App.jsx import function useRef from package react
-in jsx create HTML elements with Tailwind CSS classes
-create variable const inputRef
-create function submit()
-in jsx add to input element prop ref
-add to button element onClick event

56. Persist timer across re-renders
-in component App.jsx create variable const timerRef
-in jsx create HTML elements with Tailwind CSS classes
-create two state variables and two set functions
-create functions toggleTimer() and resetTimer()

57. Component composition challenge
-create folder components and component Timer.jsx
-in component App.jsx import component Timer from component Timer.jsx
-create component TimerDisplay.jsx
-in component Timer.jsx import component TimerDisplay from component TimerDisplay.jsx
-create component TimerControls.jsx
-in component Timer.jsx import component TimerControls from component TimerControls.jsx

58. Auto-focus start button
-in component TimerControls.jsx import functions useRef and useEffect from package react
-create variable const startButtonRef
-invoke function useEffect
-in jsx add to button element prop ref

59. Save timer to local storage
-in component Timer.jsx import function useEffect from package react
-in function useState for time pass anonymous function
-invoke function useEffect()
-in function resetTimer() invoke function localStorage.removeItem('time')